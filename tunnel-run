#!/usr/bin/env bash
set -euo pipefail

# Detect if we're being run through a symlink
name=$(basename "$0")
truename=$(basename "$(realpath "$0")")

ssh-run() {
	local rel mountspec server basepath
	rel=$(realpath . --relative-to="$(df "$(realpath .)" --output=target | sed -n 2p)")

	mountspec=$(df . --output=source | sed -n 2p)
	server=$(cut -d: -f1 <<< "$mountspec")
	basepath=$(cut -d: -f2- <<< "$mountspec")

	basepath=${basepath:-.} # Empty = relative to "current" dir
	basepath=${basepath%/} # Strip trailing slash
	basepath=${basepath:-/} # ...but restore it if the basepath is the root folder

	# log "Running on $server relative to $basepath rel=$rel"

	extra_flags=""
	if [ -t 1 ]; then
		extra_flags="-qt"
	fi

	exec ssh $extra_flags -- "$server" "cd $(printf %q "$basepath/$rel") && exec $(printf "%q " "$@")"
}

local-run() {
	local cmd=$1
	shift

	realpath_self=$(realpath "$0")

	# We want to find the first command that *isn't* symlinked to us
	alt_bin=""
	while read -r candidate; do
		if [[ "$(realpath "$candidate")" != "$realpath_self" ]]; then
			alt_bin="$candidate"
			break
		fi
	done < <(which -a -- "$cmd" 2>/dev/null || true)

	if [ -n "$alt_bin" ]; then
		# Can't exec inside the loop since stdin won't be connected to the terminal
		# i.e. test -t 0 fails
		exec "$alt_bin" "$@"
	else
		PATH=":" exec "$cmd" "$@"
		exit "$?"
	fi
}

dispatch() {
	local fs
	fs=$(df "$(realpath .)" --output=fstype | sed -n 2p)

	if [[ "${1:-}" = "locally" ]]; then
		fs=""
		shift
	fi

	if [[ "$#" = 0 ]]; then
		echo "Usage: $truename [locally] COMMAND [ARGS...]"
		exit
	fi

	case "$fs" in
		fuse.sshfs)
			ssh-run "$@"
			;;
		*)
			local-run "$@"
			;;
	esac
}

if [[ -L "$0" ]] && [[ "$name" != "$truename" ]]; then
	dispatch "$name" "$@"
else
	dispatch "$@"
fi
